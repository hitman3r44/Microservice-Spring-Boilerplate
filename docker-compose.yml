version: "3.4"
services:
  # Database
  bookstore-mysql-db:
    image: ${MYSQL_DOCKER_IMAGE_NAME}
    container_name: ${MYSQL_DOCKER_CONTAINER_NAME}
    hostname: ${MYSQL_DOCKER_HOSTNAME}
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE_NAME}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    expose:
      - "${MYSQL_PORT}"
    volumes:
      - bookstore-db-volume:/var/lib/mysql
    networks:
      - ${APP_NETWORK_NAME}

  # Database Manager
  adminer:
    image: adminer:latest
    container_name: adminer
    hostname: adminer
    environment:
      ADMINER_DEFAULT_SERVER: ${MYSQL_DOCKER_HOSTNAME}
      ADMINER_DESIGN: pepa-linha
      ADMINER_PLUGINS: tables-filter tinymce
    restart: always
    ports:
      - ${ADMINER_PORT}:8080
    expose:
      - ${ADMINER_PORT}
    networks:
      - ${APP_NETWORK_NAME}

  # JRebel Server
  jrebel-server:
    image: hitman3r44/jrebel-jetbrains-license-server:latest
    container_name: jrebel-server
    hostname: jrebel-server
    ports:
      - "9876:8081"
    expose:
      - 9876
    networks:
      - ${APP_NETWORK_NAME}

  # Core services
  bookstore-consul-discovery:
    hostname: ${CONSUL_DISCOVERY_HOST_NAME}
    image: ${CONSUL_DISCOVERY_IMAGE_NAME}
    container_name: ${CONSUL_DISCOVERY_DOCKER_CONTAINER_NAME}
    restart: always
    ports:
      - ${CONSUL_DISCOVERY_PORT}:8500
    networks:
      - ${APP_NETWORK_NAME}

  bookstore-zuul-api-gateway-server:
    build:
      context: ./bookstore-api-gateway-service
      args:
        JAR_FILE: bookstore-api-gateway-service-0.0.1-SNAPSHOT.jar
      dockerfile: Dockerfile
    image: ${API_GATEWAY_SERVICE_IMAGE_NAME}
    container_name: ${API_GATEWAY_SERVICE_DOCKER_CONTAINER_NAME}
    hostname: ${API_GATEWAY_SERVICE_HOST_NAME}
    ports:
      - ${API_GATEWAY_SERVICE_PORT}:8765
    networks:
      - ${APP_NETWORK_NAME}
    env_file: .env

  bookstore-account-service:
    build:
      context: ./bookstore-account-service
      args:
        JAR_FILE: bookstore-account-service-0.0.1-SNAPSHOT.jar
      dockerfile: Dockerfile
    image: ${ACCOUNT_SERVICE_IMAGE_NAME}
    container_name: ${ACCOUNT_SERVICE_DOCKER_CONTAINER_NAME}
    hostname: ${ACCOUNT_SERVICE_HOST_NAME}
    ports:
      - ${ACCOUNT_SERVICE_PORT}:4001
    networks:
      - ${APP_NETWORK_NAME}
    env_file: .env

  bookstore-billing-service:
    build:
      context: ./bookstore-billing-service
      args:
        JAR_FILE: bookstore-billing-service-0.0.1-SNAPSHOT.jar
      dockerfile: Dockerfile
    image: ${BILLING_SERVICE_IMAGE_NAME}
    container_name: ${BILLING_SERVICE_DOCKER_CONTAINER_NAME}
    hostname: ${BILLING_SERVICE_HOST_NAME}
    ports:
      - ${BILLING_SERVICE_PORT}:5001
    networks:
      - ${APP_NETWORK_NAME}
    env_file: .env

  bookstore-catalog-service:
    build:
      context: ./bookstore-catalog-service
      args:
        JAR_FILE: bookstore-catalog-service-0.0.1-SNAPSHOT.jar
      dockerfile: Dockerfile
    image: ${CATALOG_SERVICE_IMAGE_NAME}
    container_name: ${CATALOG_SERVICE_DOCKER_CONTAINER_NAME}
    hostname: ${CATALOG_SERVICE_HOST_NAME}
    ports:
      - ${CATALOG_SERVICE_PORT}:6001
    networks:
      - ${APP_NETWORK_NAME}
    env_file: .env

  bookstore-order-service:
    build:
      context: ./bookstore-order-service
      args:
        JAR_FILE: bookstore-order-service-0.0.1-SNAPSHOT.jar
      dockerfile: Dockerfile
    image: ${ORDER_SERVICE_IMAGE_NAME}
    container_name: ${ORDER_SERVICE_DOCKER_CONTAINER_NAME}
    hostname: ${ORDER_SERVICE_HOST_NAME}
    ports:
      - ${ORDER_SERVICE_PORT}:7001
    networks:
      - ${APP_NETWORK_NAME}
    env_file: .env

  bookstore-payment-service:
    build:
      context: ./bookstore-payment-service
      args:
        JAR_FILE: bookstore-payment-service-0.0.1-SNAPSHOT.jar
      dockerfile: Dockerfile
    image: ${PAYMENT_SERVICE_IMAGE_NAME}
    container_name: ${PAYMENT_SERVICE_DOCKER_CONTAINER_NAME}
    hostname: ${PAYMENT_SERVICE_HOST_NAME}
    ports:
      - ${PAYMENT_SERVICE_PORT}:8001
    networks:
      - ${APP_NETWORK_NAME}
    env_file: .env

  # Tracing service
  bookstore-zipkin:
    image: ${ZIPKIN_SERVICE_IMAGE_NAME}
    container_name: ${ZIPKIN_SERVICE_DOCKER_CONTAINER_NAME}
    hostname: ${ZIPKIN_SERVICE_HOST_NAME}
    ports:
      - ${ZIPKIN_SERVICE_PORT}:9411
    networks:
      - ${APP_NETWORK_NAME}

  # Monitoring Services
  bookstore-prometheus:
    build:
      context: ./bookstore-prometheus
      dockerfile: Dockerfile
    image: ${PROMETHEUS_SERVICE_IMAGE_NAME}
    container_name: ${PROMETHEUS_SERVICE_DOCKER_CONTAINER_NAME}
    hostname: ${PROMETHEUS_SERVICE_HOST_NAME}
    ports:
      - ${PROMETHEUS_SERVICE_PORT}:9090
    networks:
      - ${APP_NETWORK_NAME}

  bookstore-grafana:
    build:
      context: ./bookstore-graphana
      dockerfile: Dockerfile
    image: ${GRAPHANA_SERVICE_IMAGE_NAME}
    container_name: ${GRAPHANA_SERVICE_DOCKER_CONTAINER_NAME}
    hostname: ${GRAPHANA_SERVICE_HOST_NAME}
    ports:
      - ${GRAPHANA_SERVICE_PORT}:3000
    volumes:
      - bookstore-graphana-volume:/var/lib/grafana
    networks:
      - ${APP_NETWORK_NAME}

  # Monitoring using TICK stack.
  bookstore-telegraf:
    build:
      context: ./bookstore-telegraph
      dockerfile: Dockerfile
    image: bookstore-telegraf
    container_name: bookstore-telegraf
    hostname: bookstore-telegraf
    environment:
      HOSTNAME: "bookstore-telegraf"
    ports:
      - "8125:8125/udp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ${APP_NETWORK_NAME}

  bookstore-influxdb:
    image: influxdb
    container_name: bookstore-influxdb
    hostname: bookstore-influxdb
    volumes:
      - bookstore-influxdb-volume:/var/lib/influxdb
    ports:
      - "8086:8086"
    networks:
      - ${APP_NETWORK_NAME}

  bookstore-chronograf:
    image: chronograf:1.7.3
    container_name: bookstore-chronograf
    hostname: bookstore-chronograf
    environment:
      INFLUXDB_URL: http://bookstore-influxdb:8086
      KAPACITOR_URL: http://bookstore-kapacitor:9092
    volumes:
      - bookstore-chronograf-volume:/var/lib/chronograf
    ports:
      - "8888:8888"
    restart: always
    networks:
      - ${APP_NETWORK_NAME}

  bookstore-kapacitor:
    image: kapacitor
    container_name: bookstore-kapacitor
    hostname: bookstore-kapacitor
    environment:
      KAPACITOR_HOSTNAME: bookstore-kapacitor
      KAPACITOR_INFLUXDB_0_URLS_0: http://bookstore-influxdb:8086
    ports:
      - "9092:9092"
    networks:
      - ${APP_NETWORK_NAME}

  ## ELK STACK

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    container_name: service-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      #- cluster.initial_master_nodes=elasticsearch
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data:rw
    networks:
      - ${APP_NETWORK_NAME}

    kibana:
      image: docker.elastic.co/kibana/kibana:7.8.0
      container_name: service-kibana
      ports:
        - 5601:5601
      environment:
        ELASTICSEARCH_URL: http://elasticsearch:9200
        ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      depends_on:
        - elasticsearch
      networks:
        - ${APP_NETWORK_NAME}

    logstash:
      image: docker.elastic.co/logstash/logstash:7.8.0
      container_name: service-logstash
      restart: unless-stopped
      command: logstash -f /usr/share/logstash/pipeline
      volumes:
        - ./containerized-logstash/config:/usr/share/logstash/config:ro
        - ./containerized-logstash/pipeline:/usr/share/logstash/pipeline:ro
      ports:
        - "5000:5000"
        - "12204:12204"
      depends_on:
        - elasticsearch
      networks:
        - ${APP_NETWORK_NAME}

volumes:
  bookstore-db-volume:
  bookstore-graphana-volume:
  bookstore-telegraph-volume:
  bookstore-influxdb-volume:
  bookstore-chronograf-volume:

networks:
  bookstore-app-network:
    driver: bridge